{"version":3,"sources":["ex1/child-input.js","ex1/node.js","ex1/index.js","App.js","serviceWorker.js","index.js"],"names":["ChildInput","id","onValueChangeText","value","onParentIdChangeText","parentId","className","placeholder","onChange","defaultProps","Node","props","mapData","updateNewParent","data","children","draggable","onDragStart","ev","dataTransfer","setData","onDrop","preventDefault","idDrag","Number","getData","onDragOver","map","childId","key","Ex1","useState","0","setMapData","latestId","setLatestId","newChildValue","setNewChildValue","newChildParentId","setNewChildParentId","useEffect","oldData","window","localStorage","getItem","parseData","JSON","parse","Object","keys","length","event","target","onClick","parentItem","push","newMapData","setItem","stringify","removeItem","dropNode","previousParentId","previousParent","newParent","filter","child","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5e818b21.chunk.js","sourcesContent":["import React from 'react';\n\nfunction ChildInput({ id, onValueChangeText, value, onParentIdChangeText, parentId }) {\n  return (\n    <div className=\"child-input\">\n      <span>Latest ID: {id}</span>\n      <input\n        className=\"value-input\"\n        placeholder=\"Giá trị (có thể bỏ trống)\"\n        onChange={onValueChangeText}\n        value={value}\n      />\n      <input\n        className=\"parent-input\" \n        placeholder=\"Con ai - Id? (default = 0)\"\n        onChange={onParentIdChangeText}\n        value={parentId}\n      />\n    </div>\n  )\n}\n\nChildInput.defaultProps = {\n  id: 1\n}\n\nexport default ChildInput;","import React from 'react';\n\nfunction Node(props) {\n  const { id, mapData, updateNewParent } = props;\n  const data = mapData[id];\n\n  function handleOnNodeDragOver(ev) {\n    ev.preventDefault();\n  }\n\n  function handleOnNodeDragStart(ev) {\n    ev.dataTransfer.setData(\"id-drag\", id);\n  }\n\n  function handleOnNodeDrop(ev) {\n    ev.preventDefault();\n    const idDrag = Number(ev.dataTransfer.getData(\"id-drag\"));\n    if (id !== idDrag) {\n      updateNewParent(idDrag, id);\n    }\n  }\n\n  const { value, children } = data;\n  return (\n    <div\n      className=\"node\"\n    >\n      {value && \n        <div\n          className=\"name\"\n          draggable={true}\n          onDragStart={handleOnNodeDragStart}\n          onDrop={handleOnNodeDrop}\n          onDragOver={handleOnNodeDragOver}\n        >\n          <span>{value} ({id})</span>\n        </div>\n      }\n      <div className=\"node-children-wrapper\">\n        {children.map(childId =>\n          <Node\n            id={childId}\n            mapData={mapData}\n            key={childId}\n            updateNewParent={updateNewParent}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n\nNode.defaultProps = {\n  id: 0,\n  mapData: {}\n}\n\nexport default Node;","import React, { useState, useEffect } from 'react';\nimport ChildInput from './child-input';\nimport Node from './node';\n\nimport './styles.css';\n\nfunction Ex1() {\n  const [mapData, setMapData] = useState({ 0: { children: [] }});\n  const [latestId, setLatestId] = useState(1);\n  const [newChildValue, setNewChildValue] = useState('');\n  const [newChildParentId, setNewChildParentId] = useState('');\n\n  function handleOnNewChildValueChangeText(event) {\n    setNewChildValue(event.target.value);\n  }\n\n  function handleOnNewChildParentIdChangeText(event) {\n    setNewChildParentId(event.target.value);\n  }\n\n  function handleOnAddButtonClick() {\n    let parentId = !!mapData[newChildParentId] ? Number(newChildParentId) : 0;\n    let parentItem = mapData[parentId];\n    parentItem.children.push(latestId);\n    const newMapData = {\n      ...mapData,\n      [parentId]: parentItem,\n      [latestId]: {\n        value: newChildValue || `dump${latestId}`,\n        parentId,\n        children: []\n      }\n    };\n    setMapData(newMapData);\n    window.localStorage.setItem('ex1-map-data', JSON.stringify(newMapData));\n    setLatestId(latestId + 1);\n  }\n\n  function handleOnClearAllButtonClick() {\n    window.localStorage.removeItem('ex1-map-data');\n    setMapData({ 0: { children: [] }});\n    setLatestId(1);\n  }\n\n  function updateNewParent(id, parentId) {\n    const dropNode = mapData[id];\n    const previousParentId = dropNode.parentId;\n    const previousParent= mapData[previousParentId];\n    const newParent = mapData[parentId];\n    previousParent.children = previousParent.children.filter(child => child !== id);\n    dropNode.parentId = parentId;\n    newParent.children.push(id);\n    const newMapData = {\n      ...mapData,\n      [parentId]: { ...newParent },\n      [previousParentId]: { ...previousParent },\n      [id]: { ...dropNode }\n    };\n    setMapData(newMapData);\n    window.localStorage.setItem('ex1-map-data', JSON.stringify(newMapData));\n  }\n\n  useEffect(() => {\n    const oldData = window.localStorage.getItem('ex1-map-data');\n    if (!!oldData) {\n      const parseData = JSON.parse(oldData);\n      setMapData(parseData);\n      setLatestId(Object.keys(parseData).length)\n    } else {\n      setMapData({ 0: { children: [] }});\n    }\n  }, []);\n  return (\n    <div className=\"ex1\">\n      <div className=\"header\">\n        <ChildInput\n          id={latestId}\n          onValueChangeText={handleOnNewChildValueChangeText}\n          value={newChildValue}\n          onParentIdChangeText={handleOnNewChildParentIdChangeText}\n          parentId={newChildParentId}\n        />\n        <button onClick={handleOnAddButtonClick}>Thêm</button>\n        <button onClick={handleOnClearAllButtonClick}>Xoá hết dữ liệu</button>\n      </div>\n      <div>\n        <Node\n          mapData={mapData}\n          id={0}\n          updateNewParent={updateNewParent}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default Ex1;","import React from 'react';\nimport Ex1 from './ex1';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Ex1 />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}